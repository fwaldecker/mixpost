{
  "name": "Rag Ingestion",
  "nodes": [
    {
      "parameters": {
        "operation": "delete",
        "tableId": "documents",
        "filterType": "string",
        "filterString": "=metadata->>file_id=like.*{{ $json.file_id }}*"
      },
      "id": "c9f4c7be-6060-455a-bed7-d67c587414f2",
      "name": "Delete Old Doc Rows",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        528,
        -128
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "effb486f-de3e-4027-9f37-12863879e64d",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        832,
        864
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9a9a245e-f1a1-4282-bb02-a81ffe629f0f",
              "name": "chatInput",
              "value": "={{ $json?.chatInput || $json.body.chatInput }}",
              "type": "string"
            },
            {
              "id": "b80831d8-c653-4203-8706-adedfdb98f77",
              "name": "sessionId",
              "value": "={{ $json?.sessionId || $json.body.sessionId}}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "f8edebd2-70cb-40c9-9810-5d6109692093",
      "name": "Edit Fields",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        272,
        864
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "bf4dd093-bb02-472c-9454-7ab9af97bd1d",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "d1fe2abc-e784-43d5-bf1a-942a9882e3d4",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        0,
        1072
      ],
      "webhookId": "bf4dd093-bb02-472c-9454-7ab9af97bd1d"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "id": "b6e9d2c7-6e15-4299-848a-8645b8f26ade",
      "name": "Extract PDF Text",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1872,
        -208
      ]
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "id": "57a34b66-774e-450c-97ac-69254a4d0275",
      "name": "Aggregate",
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        1904,
        -16
      ]
    },
    {
      "parameters": {},
      "id": "51892a48-df5a-4247-a5f1-2688579cd43a",
      "name": "Character Text Splitter",
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        2560,
        480
      ]
    },
    {
      "parameters": {
        "fieldsToSummarize": {
          "values": [
            {
              "aggregation": "concatenate",
              "field": "data"
            }
          ]
        },
        "options": {}
      },
      "id": "74027da5-a4e7-45e5-95ad-c84ef943bfdd",
      "name": "Summarize",
      "type": "n8n-nodes-base.summarize",
      "typeVersion": 1,
      "position": [
        2112,
        64
      ]
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Set File ID1').item.json.file_type }}",
                    "rightValue": "application/pdf",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "2ae7faa7-a936-4621-a680-60c512163034",
                    "leftValue": "={{ $('Set File ID1').item.json.file_type }}",
                    "rightValue": "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "fc193b06-363b-4699-a97d-e5a850138b0e",
                    "leftValue": "={{ $('Set File ID1').item.json.file_type }}",
                    "rightValue": "=application/vnd.google-apps.spreadsheet",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 1
                },
                "conditions": [
                  {
                    "id": "b69f5605-0179-4b02-9a32-e34bb085f82d",
                    "leftValue": "={{ $('Set File ID1').item.json.file_type }}",
                    "rightValue": "application/vnd.google-apps.document",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              }
            }
          ]
        },
        "options": {
          "fallbackOutput": 3
        }
      },
      "id": "a05b966f-b067-4a90-b2e0-770c923318a3",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        1200,
        32
      ]
    },
    {
      "parameters": {
        "mode": "insert",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "id": "61b21af2-7fdd-4125-ae61-a32629e2d62e",
      "name": "Insert into Supabase Vectorstore",
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        2592,
        144
      ]
    },
    {
      "parameters": {
        "operation": "xlsx",
        "options": {}
      },
      "id": "aaa56f81-c6c4-4cad-a44f-cceaba5d5bbb",
      "name": "Extract from Excel",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1680,
        -16
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "f422e2e0-381c-46ea-8f38-3f58c501d8b9",
              "name": "schema",
              "value": "={{ $('Extract from Excel').isExecuted ? $('Extract from Excel').first().json.keys().toJsonString() : $('Extract from CSV').first().json.keys().toJsonString() }}",
              "type": "string"
            },
            {
              "id": "bb07c71e-5b60-4795-864c-cc3845b6bc46",
              "name": "data",
              "value": "={{ $json.concatenated_data }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        2544,
        -80
      ],
      "id": "e3a3db29-a94d-4582-97bd-e8b1c3833651",
      "name": "Set Schema"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1680,
        160
      ],
      "id": "bab31e3a-2e1e-4410-b57b-0ef876d245ff",
      "name": "Extract from CSV"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Use this tool to fetch all available documents, including the table schema if the file is a CSV or Excel file.",
        "operation": "select",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "returnAll": true,
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        544,
        1088
      ],
      "id": "c189619d-f869-4060-b12b-5fed317da237",
      "name": "List Documents"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Given a file ID, fetches the text from the document.",
        "operation": "executeQuery",
        "query": "SELECT \n    string_agg(content, ' ') as document_text\nFROM documents\n  WHERE metadata->>'file_id' = $1\nGROUP BY metadata->>'file_id';",
        "options": {
          "queryReplacement": "={{ $fromAI('file_id') }}"
        }
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        688,
        1088
      ],
      "id": "be76f913-9469-4035-a744-faed5381c2af",
      "name": "Get File Contents"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Run a SQL query - use this to query from the document_rows table once you know the file ID you are querying. dataset_id is the file_id and you are always using the row_data for filtering, which is a jsonb field that has all the keys from the file schema given in the document_metadata table.\n\nExample query:\n\nSELECT AVG((row_data->>'revenue')::numeric)\nFROM document_rows\nWHERE dataset_id = '123';\n\nExample query 2:\n\nSELECT \n    row_data->>'category' as category,\n    SUM((row_data->>'sales')::numeric) as total_sales\nFROM dataset_rows\nWHERE dataset_id = '123'\nGROUP BY row_data->>'category';",
        "operation": "executeQuery",
        "query": "{{ $fromAI('sql_query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.5,
      "position": [
        848,
        1088
      ],
      "id": "316bb51c-ba7a-4429-914b-e02c0e62fd68",
      "name": "Query Document Rows"
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolName": "documents",
        "toolDescription": "Use RAG to look up information in the knowledgebase.",
        "tableName": {
          "__rl": true,
          "value": "documents",
          "mode": "list",
          "cachedResultName": "documents"
        },
        "options": {
          "queryName": "match_documents"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1,
      "position": [
        1168,
        864
      ],
      "id": "1defa50c-cd9d-4770-9954-6c6719a9e08f",
      "name": "Supabase Vector Store1"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        1264,
        1040
      ],
      "id": "e881b0c8-97ea-4f8f-b33d-7d26e0b5f9a1",
      "name": "Embeddings OpenAI2"
    },
    {
      "parameters": {
        "operation": "delete",
        "tableId": "document_rows",
        "filters": {
          "conditions": [
            {
              "keyName": "dataset_id",
              "condition": "eq",
              "keyValue": "={{ $('Set File ID1').item.json.file_id }}"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        688,
        48
      ],
      "id": "c91a1ca3-1040-4cd5-8f09-3756181e1b12",
      "name": "Delete Old Data Rows",
      "alwaysOutputData": true,
      "executeOnce": true
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Set File ID1').item.json.file_id }}",
            "title": "={{ $('Set File ID1').item.json.file_title }}",
            "url": "={{ $('Set File ID1').item.json.file_url }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        848,
        -96
      ],
      "id": "a239b65d-9da5-4eab-9a31-57a323c6f3d0",
      "name": "Insert Document Metadata",
      "executeOnce": true
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_rows",
          "mode": "list",
          "cachedResultName": "document_rows"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "dataset_id": "={{ $('Set File ID1').item.json.file_id }}",
            "row_data": "={{ $json.toJsonString().replaceAll(/'/g, \"''\") }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "dataset_id",
              "displayName": "dataset_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "row_data",
              "displayName": "row_data",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "object",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        1904,
        160
      ],
      "id": "d72e7a0c-d7e4-40d0-8f33-85038ca3da41",
      "name": "Insert Table Rows"
    },
    {
      "parameters": {
        "operation": "upsert",
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "document_metadata",
          "mode": "list",
          "cachedResultName": "document_metadata"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "id": "={{ $('Set File ID1').item.json.file_id }}",
            "schema": "={{ $json.schema }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": true,
              "defaultMatch": true,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "url",
              "displayName": "url",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": false
            },
            {
              "id": "schema",
              "displayName": "schema",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        2768,
        -80
      ],
      "id": "fa3a01bf-0e41-408b-96bf-77fc6621bb90",
      "name": "Update Schema for Document Metadata"
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "f6df3164-1323-4d8c-ba84-63aebbf7e0fd",
      "name": "OpenAI Chat Model2",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        272,
        1088
      ]
    },
    {
      "parameters": {
        "jsonMode": "expressionData",
        "jsonData": "={{ $json.data || $json.text || $json.concatenated_data }}",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "=file_id",
                "value": "={{ $('Set File ID1').first().json.file_id }}"
              },
              {
                "name": "file_title",
                "value": "={{ $('Set File ID1').first().json.file_title }}"
              }
            ]
          }
        }
      },
      "id": "63f165e1-ef24-4aa5-be24-146c64d1acdf",
      "name": "Default Data Loader2",
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        2672,
        368
      ]
    },
    {
      "parameters": {
        "model": "text-embedding-3-small",
        "options": {}
      },
      "id": "762e3148-0544-488f-9257-e0402d69adb2",
      "name": "Embeddings OpenAI4",
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1,
      "position": [
        2432,
        368
      ]
    },
    {
      "parameters": {
        "content": "## Agent Tools for RAG",
        "height": 528.85546469693,
        "width": 583.4552380860637,
        "color": 4
      },
      "id": "18545a28-54c2-4a15-93a4-263914723cb8",
      "name": "Sticky Note11",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1008,
        720
      ]
    },
    {
      "parameters": {
        "content": "## Tool to Add a Google Drive File to Vector DB",
        "height": 867,
        "width": 3073,
        "color": 5
      },
      "id": "d148a740-7d7e-4b80-ab99-e5c8f95b1165",
      "name": "Sticky Note12",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -80,
        -240
      ]
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $('Set File ID1').item.json.file_id }}",
          "mode": "id"
        },
        "options": {
          "googleFileConversion": {
            "conversion": {
              "docsToFormat": "text/plain"
            }
          }
        }
      },
      "id": "1501bb20-e08e-40e4-a5d9-c8e93348e72d",
      "name": "Download File1",
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        1008,
        48
      ],
      "executeOnce": true
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "13wmVBlWX7kbASo6M3bezsxZ8vQT1Ujzt",
          "mode": "list",
          "cachedResultName": "! Everyday OS",
          "cachedResultUrl": "https://drive.google.com/drive/folders/13wmVBlWX7kbASo6M3bezsxZ8vQT1Ujzt"
        },
        "event": "fileCreated",
        "options": {}
      },
      "id": "d166d7f9-b36b-4c2f-95a4-4e69eb74d81d",
      "name": "File Created1",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -16,
        -128
      ]
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "13wmVBlWX7kbASo6M3bezsxZ8vQT1Ujzt",
          "mode": "list",
          "cachedResultName": "! Everyday OS",
          "cachedResultUrl": "https://drive.google.com/drive/folders/13wmVBlWX7kbASo6M3bezsxZ8vQT1Ujzt"
        },
        "event": "fileUpdated",
        "options": {}
      },
      "id": "8f747cef-2311-4c43-854b-a8b465b12a06",
      "name": "File Updated1",
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -16,
        48
      ],
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "rqOZTBH7PEf8E73a",
          "name": "Google Drive account"
        }
      }
    },
    {
      "parameters": {
        "operation": "text",
        "options": {}
      },
      "id": "41f336ae-eb91-449e-97ad-a7c088197b0f",
      "name": "Extract Document Text1",
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1872,
        368
      ],
      "alwaysOutputData": true
    },
    {
      "parameters": {},
      "id": "e1101469-1b51-4680-838f-c1accb706ef6",
      "name": "Postgres Chat Memory1",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1,
      "position": [
        400,
        1088
      ],
      "notesInFlow": false
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "10646eae-ae46-4327-a4dc-9987c2d76173",
              "name": "file_id",
              "value": "={{ $json.id }}",
              "type": "string"
            },
            {
              "id": "f4536df5-d0b1-4392-bf17-b8137fb31a44",
              "name": "file_type",
              "value": "={{ $json.mimeType }}",
              "type": "string"
            },
            {
              "id": "77d782de-169d-4a46-8a8e-a3831c04d90f",
              "name": "file_title",
              "value": "={{ $json.name }}",
              "type": "string"
            },
            {
              "id": "9bde4d7f-e4f3-4ebd-9338-dce1350f9eab",
              "name": "file_url",
              "value": "={{ $json.webViewLink }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "3358ca75-4afd-4c03-871a-7b1fbf07ed9f",
      "name": "Set File ID1",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        352,
        48
      ]
    },
    {
      "parameters": {
        "content": "## RAG AI Agent with Chat Interface",
        "height": 464.8027193303974,
        "width": 1035.6381264595484
      },
      "id": "4ce96d2c-027b-4d6b-ad37-3bcc3a4978e6",
      "name": "Sticky Note13",
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -48,
        784
      ]
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.chatInput }}",
        "options": {
          "systemMessage": "You are a personal assistant who helps answer questions from a corpus of documents. The documents are either text based (Txt, docs, extracted PDFs, etc.) or tabular data (CSVs or Excel documents).\n\nYou are given tools to perform RAG in the 'documents' table, look up the documents available in your knowledge base in the 'document_metadata' table, extract all the text from a given document, and query the tabular files with SQL in the 'document_rows' table.\n\nAlways start by performing RAG unless the question requires a SQL query for tabular data (fetching a sum, finding a max, something a RAG lookup would be unreliable for). If RAG doesn't help, then look at the documents that are available to you, find a few that you think would contain the answer, and then analyze those.\n\nAlways tell the user if you didn't find the answer. Don't make something up just to please them."
        }
      },
      "id": "51d19389-6613-4ee8-a380-2c8fc55b40cf",
      "name": "RAG AI Agent1",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [
        480,
        864
      ]
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        160,
        -128
      ],
      "id": "7998ee2c-dc17-47e5-a1fa-399a8bc714b8",
      "name": "Loop Over Items1"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "solo-condition",
                    "leftValue": "={{ $json.callType }}",
                    "rightValue": "SOLO",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "id": "podcast-condition",
                    "leftValue": "={{ $json.callType }}",
                    "rightValue": "PODCAST",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "Creator Content"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "demo-condition",
                    "leftValue": "={{ $json.callType }}",
                    "rightValue": "DEMO",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  },
                  {
                    "id": "sales-condition",
                    "leftValue": "={{ $json.callType }}",
                    "rightValue": "SALES",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ],
                "combinator": "or"
              },
              "renameOutput": true,
              "outputKey": "CRM Sales"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -2048,
        512
      ],
      "id": "95277673-2a5e-4715-89ab-db3854b115a8",
      "name": "Route by Call Type"
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appS7qip5wnjgQwKL",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "tblg75MyQZREAqUKk",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Title": "={{ $json.topic }}",
            "Call Type": "={{ $json.callType }}",
            "Date": "={{ $json.startTime }}",
            "Meeting ID": "={{ String($json.meetingId) }}",
            "Duration": "={{ $json.duration }}",
            "Host": "={{ $json.host.name }}",
            "Host Email": "={{ $json.host.email }}",
            "Participant Count": "={{ $json.hasContacts ? $json.contacts.length + 1 : 1 }}",
            "Share URL": "={{ $json.shareUrl }}"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -1840,
        400
      ],
      "id": "6c8680cc-fedc-4642-b1a7-e5155cb9ef2c",
      "name": "Create Creator Video Record"
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appVf6mDJp2ve6TSI",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "tblg75MyQZREAqUKk",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Contact Name": "={{ $json.primaryContact ? $json.primaryContact.name : 'Unknown' }}",
            "Contact Email": "={{ $json.primaryContact ? $json.primaryContact.email : '' }}",
            "Call Type": "={{ $json.callType }}",
            "Date": "={{ $json.startTime }}",
            "Meeting Topic": "={{ $json.topic }}",
            "Meeting ID": "={{ String($json.meetingId) }}",
            "Duration": "={{ $json.duration }}",
            "Host": "={{ $json.host.name }}",
            "All Participants": "={{ $json.contactNames.join(', ') }}"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -1840,
        608
      ],
      "id": "0fd19d77-7478-4d50-99e5-eae790ad7724",
      "name": "Create CRM Meeting Record"
    },
    {
      "parameters": {
        "resource": "folder",
        "name": "={{ $json.folderName }}",
        "driveId": {
          "__rl": true,
          "value": "My Drive",
          "mode": "list"
        },
        "folderId": {
          "__rl": true,
          "value": "1ormr2eHeEW3gqwKW8CTFZUG-jHHkoZCa",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1648,
        400
      ],
      "id": "e8a316f2-4d6b-4a1a-b56a-8e60a5a39474",
      "name": "Create Creator Folder"
    },
    {
      "parameters": {
        "resource": "folder",
        "name": "={{ $json.folderName }}",
        "driveId": {
          "__rl": true,
          "value": "My Drive",
          "mode": "list"
        },
        "folderId": {
          "__rl": true,
          "value": "1WZdRdWF3X7SXGLv7B1TPTQN2vj3yIu6k",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1648,
        608
      ],
      "id": "607238cc-564f-4d85-bede-1360cda1ca6d",
      "name": "Create CRM Folder"
    },
    {
      "parameters": {
        "jsCode": "// Get the transcript content\nconst vttContent = $('Text Convert1').item.json.output || '';\nconst folderData = $input.item.json;\n\n// Convert VTT to SRT format\nfunction convertVttToSrt(vttText) {\n  // Split into lines and remove empty lines\n  const lines = vttText.split('\\n').filter(line => line.trim());\n  \n  let srtContent = '';\n  let counter = 1;\n  \n  // Process each speaker block\n  const speakerBlocks = vttText.split(/\\n\\n+/).filter(block => block.trim());\n  \n  speakerBlocks.forEach((block) => {\n    if (!block.trim()) return;\n    \n    // Parse speaker and text\n    const match = block.match(/^([^:]+):\\s*(.*)$/s);\n    if (match) {\n      const speaker = match[1].trim();\n      const text = match[2].trim().replace(/\\n/g, ' ');\n      \n      // Create SRT format with dummy timestamps (adjust if you have actual timestamps)\n      const startTime = `00:${String(counter).padStart(2, '0')}:00,000`;\n      const endTime = `00:${String(counter).padStart(2, '0')}:30,000`;\n      \n      srtContent += `${counter}\\n`;\n      srtContent += `${startTime} --> ${endTime}\\n`;\n      srtContent += `${speaker}: ${text}\\n\\n`;\n      \n      counter++;\n    }\n  });\n  \n  return srtContent.trim();\n}\n\n// Convert VTT to SRT\nconst srtContent = convertVttToSrt(vttContent);\n\n// Get meeting data for file naming\nconst meetingData = $('Process AI Classification').item.json;\n\n// Return both transcript formats\nreturn {\n  json: {\n    folderId: folderData.id,\n    folderLink: folderData.webViewLink,\n    srtContent: srtContent,\n    txtContent: vttContent,\n    srtFileName: `transcript_${meetingData.dateString}_${meetingData.timeString}.srt`,\n    txtFileName: `transcript_${meetingData.dateString}_${meetingData.timeString}.txt`,\n    airtableRecordId: $('Airtable').item.json.id\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1440,
        512
      ],
      "id": "78123433-7e87-492e-a466-6a2fb6973b61",
      "name": "Convert VTT to SRT"
    },
    {
      "parameters": {
        "resource": "document"
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1248,
        464
      ],
      "id": "46342d65-0861-487f-87da-d70c1d6591dd",
      "name": "Create SRT Document"
    },
    {
      "parameters": {
        "jsCode": "// Get folder and transcript doc info\nconst folderData = $input.item.json;\nconst meetingData = $('Process AI Classification').item.json;\n\n// Get SRT and TXT document IDs from previous nodes\nconst srtDocId = $('Create SRT Document').item.json.id;\nconst txtDocId = $('Create TXT Document').item.json.id;\n\n// Return each video file for upload\nconst videoFiles = meetingData.files.filter(file => \n  file.recordingType !== 'audio_transcript'\n);\n\nreturn videoFiles.map(file => ({\n  json: {\n    downloadUrl: file.downloadUrl,\n    fileName: file.fileName,\n    folderId: folderData.folderId,\n    folderLink: folderData.folderLink,\n    airtableRecordId: folderData.airtableRecordId,\n    srtDocId: srtDocId,\n    txtDocId: txtDocId,\n    totalFiles: videoFiles.length\n  }\n}));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -928,
        528
      ],
      "id": "d43ae2b1-992f-49ad-8962-c9cc0084a782",
      "name": "Prepare Video Files for Upload"
    },
    {
      "parameters": {
        "name": "={{ $json.fileName }}",
        "driveId": {
          "__rl": true,
          "value": "My Drive",
          "mode": "list"
        },
        "folderId": {
          "__rl": true,
          "value": "={{ $json.folderId }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -720,
        528
      ],
      "id": "d72dfd91-df01-4cb7-b24f-31744ddb18a1",
      "name": "Upload Video Files"
    },
    {
      "parameters": {
        "jsCode": "// Aggregate all upload results\nconst uploads = $input.all();\nconst firstItem = uploads[0]?.json || {};\n\n// Count successful uploads\nconst successCount = uploads.filter(item => !item.error).length;\n\n// Get document links\nconst srtDocLink = `https://docs.google.com/document/d/${firstItem.srtDocId}`;\nconst txtDocLink = `https://docs.google.com/document/d/${firstItem.txtDocId}`;\n\nreturn {\n  json: {\n    airtableRecordId: firstItem.airtableRecordId,\n    folderLink: firstItem.folderLink,\n    srtDocLink: srtDocLink,\n    txtDocLink: txtDocLink,\n    uploadStatus: `${successCount}/${firstItem.totalFiles} files uploaded`,\n    allUploadsSuccessful: successCount === firstItem.totalFiles\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -528,
        528
      ],
      "id": "5451933d-e796-4d49-b4c8-5dc7d2b21b48",
      "name": "Aggregate Results"
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appS7qip5wnjgQwKL",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "tblg75MyQZREAqUKk",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Folder Link": "={{ $json.folderLink }}",
            "SRT Transcript": "={{ $json.srtDocLink }}",
            "TXT Transcript": "={{ $json.txtDocLink }}",
            "Upload Status": "={{ $json.uploadStatus }}",
            "Processing Complete": true
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -320,
        432
      ],
      "id": "cdcc97ec-0d2d-4ee8-8839-c55ed58b20c0",
      "name": "Update Creator Record"
    },
    {
      "parameters": {
        "operation": "update",
        "base": {
          "__rl": true,
          "value": "appVf6mDJp2ve6TSI",
          "mode": "id"
        },
        "table": {
          "__rl": true,
          "value": "tblg75MyQZREAqUKk",
          "mode": "id"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Folder Link": "={{ $json.folderLink }}",
            "SRT Transcript": "={{ $json.srtDocLink }}",
            "TXT Transcript": "={{ $json.txtDocLink }}",
            "Upload Status": "={{ $json.uploadStatus }}",
            "Processing Complete": true
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        -320,
        624
      ],
      "id": "c808e148-1f74-4348-9abc-3b91b3fa5811",
      "name": "Update CRM Record"
    },
    {
      "parameters": {
        "resource": "document"
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -1088,
        480
      ],
      "id": "9cd76928-63cc-44d8-b8da-51e83aa79775",
      "name": "Create TXT Document"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE document_metadata (\n    id TEXT PRIMARY KEY,\n    title TEXT,\n    url TEXT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    schema TEXT\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -784,
        -80
      ],
      "id": "10d26d42-1a13-436f-bceb-673dc8d42f9e",
      "name": "Create Document Metadata Table"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE document_rows (\n    id SERIAL PRIMARY KEY,\n    dataset_id TEXT REFERENCES document_metadata(id),\n    row_data JSONB  -- Store the actual row data\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -560,
        -80
      ],
      "id": "228f95f8-e747-4f4a-9420-1277da417c61",
      "name": "Create Document Rows Table (for Tabular Data)"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Enable the pgvector extension to work with embedding vectors\ncreate extension vector;\n\n-- Create a table to store your documents\ncreate table documents (\n  id bigserial primary key,\n  content text, -- corresponds to Document.pageContent\n  metadata jsonb, -- corresponds to Document.metadata\n  embedding vector(1536) -- 1536 works for OpenAI embeddings, change if needed\n);\n\n-- Create a function to search for documents\ncreate function match_documents (\n  query_embedding vector(1536),\n  match_count int default null,\n  filter jsonb DEFAULT '{}'\n) returns table (\n  id bigint,\n  content text,\n  metadata jsonb,\n  similarity float\n)\nlanguage plpgsql\nas $$\n#variable_conflict use_column\nbegin\n  return query\n  select\n    id,\n    content,\n    metadata,\n    1 - (documents.embedding <=> query_embedding) as similarity\n  from documents\n  where metadata @> filter\n  order by documents.embedding <=> query_embedding\n  limit match_count;\nend;\n$$;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        -976,
        -80
      ],
      "id": "0e966113-b07f-4e28-a0d6-1077bd7c2614",
      "name": "Create Documents Table and Match Function"
    },
    {
      "parameters": {
        "content": "## Run Each Node Once to Set Up Database Tables",
        "height": 300,
        "width": 680,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1040,
        -176
      ],
      "typeVersion": 1,
      "id": "c670ff7a-5c3c-4d3a-862e-b4cef707deab",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "content": "## 🚀 Ultimate n8n Agentic RAG Template\n\n**Author:** [Cole Medin](https://www.youtube.com/@ColeMedin)\n\n## What is this?\nThis template provides a complete implementation of an **Agentic RAG (Retrieval Augmented Generation)** system in n8n that can be extended easily for your specific use case and knowledge base. Unlike standard RAG which only performs simple lookups, this agent can reason about your knowledge base, self-improve retrieval, and dynamically switch between different tools based on the specific question.\n\n## Why Agentic RAG?\nStandard RAG has significant limitations:\n- Poor analysis of numerical/tabular data\n- Missing context due to document chunking\n- Inability to connect information across documents\n- No dynamic tool selection based on question type\n\n## What makes this template powerful:\n- **Intelligent tool selection**: Switches between RAG lookups, SQL queries, or full document retrieval based on the question\n- **Complete document context**: Accesses entire documents when needed instead of just chunks\n- **Accurate numerical analysis**: Uses SQL for precise calculations on spreadsheet/tabular data\n- **Cross-document insights**: Connects information across your entire knowledge base\n- **Multi-file processing**: Handles multiple documents in a single workflow loop\n- **Efficient storage**: Uses JSONB in Supabase to store tabular data without creating new tables for each CSV\n\n## Getting Started\n1. Run the table creation nodes first to set up your database tables in Supabase\n2. Upload your documents through Google Drive (or swap out for a different file storage solution)\n3. The agent will process them automatically (chunking text, storing tabular data in Supabase)\n4. Start asking questions that leverage the agent's multiple reasoning approaches\n\n## Customization\nThis template provides a solid foundation that you can extend by:\n- Tuning the system prompt for your specific use case\n- Adding document metadata like summaries\n- Implementing more advanced RAG techniques\n- Optimizing for larger knowledge bases\n\n---\n\nI do intend on making a local version of this agent very soon!",
        "height": 1320,
        "width": 540,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -2096,
        -1072
      ],
      "typeVersion": 1,
      "id": "fce0ea08-b179-4646-8fde-60983acec926",
      "name": "Sticky Note15"
    }
  ],
  "pinData": {},
  "connections": {
    "Delete Old Doc Rows": {
      "main": [
        [
          {
            "node": "Delete Old Data Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract PDF Text": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Summarize",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader2",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Summarize": {
      "main": [
        [
          {
            "node": "Set Schema",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Extract PDF Text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from Excel",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract from CSV",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Extract Document Text1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert into Supabase Vectorstore": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from Excel": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Schema": {
      "main": [
        [
          {
            "node": "Update Schema for Document Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from CSV": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert Table Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "List Documents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get File Contents": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Query Document Rows": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Supabase Vector Store1": {
      "ai_tool": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI2": {
      "ai_embedding": [
        [
          {
            "node": "Supabase Vector Store1",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Delete Old Data Rows": {
      "main": [
        [
          {
            "node": "Insert Document Metadata",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Document Metadata": {
      "main": [
        [
          {
            "node": "Download File1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader2": {
      "ai_document": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI4": {
      "ai_embedding": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Download File1": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Created1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "File Updated1": {
      "main": [
        [
          {
            "node": "Loop Over Items1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Document Text1": {
      "main": [
        [
          {
            "node": "Insert into Supabase Vectorstore",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory1": {
      "ai_memory": [
        [
          {
            "node": "RAG AI Agent1",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Set File ID1": {
      "main": [
        [
          {
            "node": "Delete Old Doc Rows",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RAG AI Agent1": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items1": {
      "main": [
        [],
        [
          {
            "node": "Set File ID1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route by Call Type": {
      "main": [
        [
          {
            "node": "Create Creator Video Record",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create CRM Meeting Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Creator Video Record": {
      "main": [
        [
          {
            "node": "Create Creator Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create CRM Meeting Record": {
      "main": [
        [
          {
            "node": "Create CRM Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Creator Folder": {
      "main": [
        [
          {
            "node": "Convert VTT to SRT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create CRM Folder": {
      "main": [
        [
          {
            "node": "Convert VTT to SRT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert VTT to SRT": {
      "main": [
        [
          {
            "node": "Create SRT Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create SRT Document": {
      "main": [
        [
          {
            "node": "Create TXT Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Video Files for Upload": {
      "main": [
        [
          {
            "node": "Upload Video Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Upload Video Files": {
      "main": [
        [
          {
            "node": "Aggregate Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate Results": {
      "main": [
        [
          {
            "node": "Update Creator Record",
            "type": "main",
            "index": 0
          },
          {
            "node": "Update CRM Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create TXT Document": {
      "main": [
        [
          {
            "node": "Prepare Video Files for Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Document Metadata Table": {
      "main": [
        [
          {
            "node": "Create Document Rows Table (for Tabular Data)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Documents Table and Match Function": {
      "main": [
        [
          {
            "node": "Create Document Metadata Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "765524c7-89b2-43ff-8074-2675d80fcaf4",
  "meta": {
    "instanceId": "b6feeec6266ce5c242c41c4306324474e994ecb1129cd2b23d76b6746965b634"
  },
  "id": "Vo6GdDQbENXZNXDe",
  "tags": []
}